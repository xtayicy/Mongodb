1.the aggregation pipeline
	db.orders.aggregate([
		{$match:{status:"A"}},
		{$group:{_id:"$cust_id",total:{$sum:"$amount"}}}
	])

data:
	{cust_id:"A123",amount:500,status:"A"}
	{cust_id:"A123",amount:250,status:"A"}
	{cust_id:"B212",amount:200,status:"A"}
	{cust_id:"A123",amount:300,status:"D"}
	
	{cust_id:"A123",amount:500,status:"A"}
	{cust_id:"A123",amount:250,status:"A"}
	{cust_id:"B212",amount:200,status:"A"}
	
	{_id:"A123",total:750}
	{_id:"B123",total:200}
	
2.Map-Reduce
	db.orders.mapReduce(
		function(){emit(this.cust_id,this.amount);},
		function(key,values){return Array.sum(values)},
		{
			query:{status:"A"},
			out:"order_status"
		}
	)
	
data:
	{cust_id:"A123",amount:500,status:"A"}
	{cust_id:"A123",amount:250,status:"A"}
	{cust_id:"B212",amount:200,status:"A"}
	{cust_id:"A123",amount:300,status:"D"}
	
	{cust_id:"A123",amount:500,status:"A"}
	{cust_id:"A123",amount:250,status:"A"}
	{cust_id:"B212",amount:200,status:"A"}
	
	{"A123":[500,250]}
	{"B123":200}
	
	{_id:'A123',value:750}
	{_id:"B123",value:200}
	
3.Single Purpose Aggregation Operations
	db.orders.distinct("cust_id")
	
data:
	{cust_id:"A123",amount:500,status:"A"}
	{cust_id:"A123",amount:250,status:"A"}
	{cust_id:"B212",amount:200,status:"A"}
	{cust_id:"A123",amount:300,status:"D"}
	
	["A123","B123"]			